<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd 
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

    <mvc:view-controller path="/index" />

    <mvc:resources location="/common/" mapping="/static/common/**"/>
    <mvc:resources location="/images/" mapping="/static/images/**"/>
    <mvc:resources location="/images/login/" mapping="/static/images/login/**"/>
    <mvc:resources location="/js/" mapping="/static/js/**"/>
    <mvc:resources location="/css/" mapping="/static/css/**"/>
    <mvc:resources location="/js/date/" mapping="/js/date/**"/>
    <mvc:resources location="/chart/" mapping="/static/chart/**"/>
    <mvc:resources location="/pdaupdate/" mapping="/static/pdaupdate/**"/>
    <mvc:resources location="/upload/" mapping="/static/upload/**"/>
    <mvc:resources location="/record1Images/" mapping="/static/record1Images/**"/>

    <!-- The controllers are autodetected POJOs labeled with the @Controller annotation -->
    <context:component-scan base-package="org.nercita.pbms" use-default-filters="false">
        <context:include-filter expression="org.springframework.stereotype.Controller" type="annotation"/>
    </context:component-scan>

    <!-- <mvc:annotation-driven/> 默认注册下面两个两个bean -->
    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"/>
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <bean class="org.wangzz.core.web.springmvc.StringHttpMessageConverter"/>
                <ref bean="msgConverter"/>
            </list>
        </property>
        <property name="webBindingInitializer">
            <!-- 配置 Spring MVC DataBinder 和 validator 验证-->
            <bean class="org.nercita.pbms.util.CustomBindInitializer">
                <property name="format" value="yyyy-MM-dd"/>
                <property name="validator" ref="validator"/>
                <property name="conversionService" ref="conversionService"/>
            </bean>
        </property>
    </bean>
    <bean id="msgConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
                <value>text/json;charset=UTF-8</value>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <!-- Creates the JSR-303 Validator -->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionService"/>
  <!--   <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean"/> -->

    <!-- 根据客户端的不同的请求决定不同的view进行响应, 如 /blog/1.jsp /blog/1.json /blog/1.xml 	-->
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="ignoreAcceptHeader" value="true"/>
        <property name="defaultContentType" value="text/html"/>
        <property name="mediaTypes">
            <map>
                <entry key="json" value="application/json"/>
                <entry key="xml" value="application/xml"/>
            </map>
        </property>
        <property name="favorParameter" value="false"/>
        <property name="viewResolvers">
            <list>
                <bean class="org.springframework.web.servlet.view.BeanNameViewResolver"/>
                <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
                    <property name="prefix" value="/WEB-INF/views/"/>
                    <property name="suffix" value=".jsp"/>
                </bean>
            </list>
        </property>
        <property name="defaultViews">
            <list>
                <bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView"/>
                <bean class="org.springframework.web.servlet.view.xml.MarshallingView">
                    <property name="marshaller">
                        <bean class="org.springframework.oxm.xstream.XStreamMarshaller"/>
                    </property>
                </bean>
            </list>
        </property>
    </bean>


    <!--
         This bean resolves specific types of exceptions to corresponding
         logical - view names for error views. The default behaviour of
         DispatcherServlet - is to propagate all exceptions to the servlet
         container: this will happen - here with all other types of exceptions.
     -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="defaultErrorView" value="error"/>
        <property name="exceptionMappings">
            <props>
                <prop key=".DataAccessException">dataAccessFailure</prop>
                <prop key=".NoSuchRequestHandlingMethodException">resourceNotFound</prop>
                <prop key=".TypeMismatchException">resourceNotFound</prop>
                <prop key=".lang.Exception">uncaughtException</prop>
            </props>
        </property>
    </bean>

    <!-- allows for integration of file upload functionality -->

    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="104857600"/>
        <property name="maxInMemorySize" value="4096"/>
    </bean>


</beans>
